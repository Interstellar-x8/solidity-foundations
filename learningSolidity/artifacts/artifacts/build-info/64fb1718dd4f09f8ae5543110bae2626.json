{
	"id": "64fb1718dd4f09f8ae5543110bae2626",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"etherUnits.sol": {
				"content": "pragma solidity >= 0.7.0 < 0.9.0;\n\n// Ethereum = blockchain\n// Ether = currency\n\ncontract etherUnits {\n    function test() public {\n\n        // wei is the smallest denomination of ether\n        assert(1000000000000000000 wei == 1 ether); // 10^18 wei = 1 eth\n        assert(1 wei == 1); // 1 wei = 1\n\n        assert(1 ether == 1e18);\n        // 1 ether == 1e18 (1 to the power of 18)\n        // create an assertion for 2 eths to be equivalent to weis.\n\n        assert(2 ether == 2000000000000000000 wei);\n    }\n\n    function exercise() public {\n            assert(1 minutes == 60 seconds);\n            assert(24 hours == 1440 minutes);\n            assert(1 days == 24 hours);\n            assert(1 weeks == 7 days);\n\n        }\n\n\n\n\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"etherUnits.sol": {
				"etherUnits": {
					"abi": [
						{
							"inputs": [],
							"name": "exercise",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"etherUnits.sol\":81:731  contract etherUnits {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"etherUnits.sol\":81:731  contract etherUnits {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xd32cb0fe\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"etherUnits.sol\":516:725  function exercise() public {... */\n    tag_3:\n      tag_5\n      tag_6\n      jump\t// in\n    tag_5:\n      stop\n        /* \"etherUnits.sol\":107:510  function test() public {... */\n    tag_4:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      stop\n        /* \"etherUnits.sol\":516:725  function exercise() public {... */\n    tag_6:\n        /* \"etherUnits.sol\":577:587  60 seconds */\n      0x3c\n        /* \"etherUnits.sol\":564:573  1 minutes */\n      dup1\n        /* \"etherUnits.sol\":564:587  1 minutes == 60 seconds */\n      eq\n        /* \"etherUnits.sol\":557:588  assert(1 minutes == 60 seconds) */\n      tag_10\n      jumpi\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n    tag_10:\n        /* \"etherUnits.sol\":621:633  1440 minutes */\n      0x015180\n        /* \"etherUnits.sol\":609:617  24 hours */\n      dup1\n        /* \"etherUnits.sol\":609:633  24 hours == 1440 minutes */\n      eq\n        /* \"etherUnits.sol\":602:634  assert(24 hours == 1440 minutes) */\n      tag_13\n      jumpi\n      tag_14\n      tag_12\n      jump\t// in\n    tag_14:\n    tag_13:\n        /* \"etherUnits.sol\":665:673  24 hours */\n      0x015180\n        /* \"etherUnits.sol\":655:661  1 days */\n      dup1\n        /* \"etherUnits.sol\":655:673  1 days == 24 hours */\n      eq\n        /* \"etherUnits.sol\":648:674  assert(1 days == 24 hours) */\n      tag_15\n      jumpi\n      tag_16\n      tag_12\n      jump\t// in\n    tag_16:\n    tag_15:\n        /* \"etherUnits.sol\":706:712  7 days */\n      0x093a80\n        /* \"etherUnits.sol\":695:702  1 weeks */\n      dup1\n        /* \"etherUnits.sol\":695:712  1 weeks == 7 days */\n      eq\n        /* \"etherUnits.sol\":688:713  assert(1 weeks == 7 days) */\n      tag_17\n      jumpi\n      tag_18\n      tag_12\n      jump\t// in\n    tag_18:\n    tag_17:\n        /* \"etherUnits.sol\":516:725  function exercise() public {... */\n      jump\t// out\n        /* \"etherUnits.sol\":107:510  function test() public {... */\n    tag_8:\n        /* \"etherUnits.sol\":228:235  1 ether */\n      0x0de0b6b3a7640000\n        /* \"etherUnits.sol\":201:224  1000000000000000000 wei */\n      dup1\n        /* \"etherUnits.sol\":201:235  1000000000000000000 wei == 1 ether */\n      eq\n        /* \"etherUnits.sol\":194:236  assert(1000000000000000000 wei == 1 ether) */\n      tag_20\n      jumpi\n      tag_21\n      tag_12\n      jump\t// in\n    tag_21:\n    tag_20:\n        /* \"etherUnits.sol\":283:284  1 */\n      0x01\n        /* \"etherUnits.sol\":274:279  1 wei */\n      dup1\n        /* \"etherUnits.sol\":274:284  1 wei == 1 */\n      eq\n        /* \"etherUnits.sol\":267:285  assert(1 wei == 1) */\n      tag_22\n      jumpi\n      tag_23\n      tag_12\n      jump\t// in\n    tag_23:\n    tag_22:\n        /* \"etherUnits.sol\":327:331  1e18 */\n      0x0de0b6b3a7640000\n        /* \"etherUnits.sol\":316:323  1 ether */\n      dup1\n        /* \"etherUnits.sol\":316:331  1 ether == 1e18 */\n      eq\n        /* \"etherUnits.sol\":309:332  assert(1 ether == 1e18) */\n      tag_24\n      jumpi\n      tag_25\n      tag_12\n      jump\t// in\n    tag_25:\n    tag_24:\n        /* \"etherUnits.sol\":479:502  2000000000000000000 wei */\n      0x1bc16d674ec80000\n        /* \"etherUnits.sol\":468:475  2 ether */\n      dup1\n        /* \"etherUnits.sol\":468:502  2 ether == 2000000000000000000 wei */\n      eq\n        /* \"etherUnits.sol\":461:503  assert(2 ether == 2000000000000000000 wei) */\n      tag_26\n      jumpi\n      tag_27\n      tag_12\n      jump\t// in\n    tag_27:\n    tag_26:\n        /* \"etherUnits.sol\":107:510  function test() public {... */\n      jump\t// out\n        /* \"#utility.yul\":7:187   */\n    tag_12:\n        /* \"#utility.yul\":55:132   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":52:53   */\n      0x00\n        /* \"#utility.yul\":45:133   */\n      mstore\n        /* \"#utility.yul\":152:156   */\n      0x01\n        /* \"#utility.yul\":149:150   */\n      0x04\n        /* \"#utility.yul\":142:157   */\n      mstore\n        /* \"#utility.yul\":176:180   */\n      0x24\n        /* \"#utility.yul\":173:174   */\n      0x00\n        /* \"#utility.yul\":166:181   */\n      revert\n\n    auxdata: 0xa2646970667358221220e405829ce3a9cc6afd5d2188264d11ef65a119d6aaef9f545aae71f66714690b64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b506101568061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063d32cb0fe14610038578063f8a8fd6d14610042575b5f5ffd5b61004061004c565b005b61004a610098565b005b603c801461005d5761005c6100f3565b5b6201518080146100705761006f6100f3565b5b620151808014610083576100826100f3565b5b62093a808014610096576100956100f3565b5b565b670de0b6b3a764000080146100b0576100af6100f3565b5b600180146100c1576100c06100f3565b5b670de0b6b3a764000080146100d9576100d86100f3565b5b671bc16d674ec8000080146100f1576100f06100f3565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220e405829ce3a9cc6afd5d2188264d11ef65a119d6aaef9f545aae71f66714690b64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0x156 DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x4C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A PUSH2 0x98 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x5D JUMPI PUSH2 0x5C PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x70 JUMPI PUSH2 0x6F PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x83 JUMPI PUSH2 0x82 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x96 JUMPI PUSH2 0x95 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xB0 JUMPI PUSH2 0xAF PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xC1 JUMPI PUSH2 0xC0 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xD9 JUMPI PUSH2 0xD8 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH8 0x1BC16D674EC80000 DUP1 EQ PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETF SDIV DUP3 SWAP13 CALLF 0xA9CC PUSH11 0xFD5D2188264D11EF65A119 0xD6 0xAA 0xEF SWAP16 SLOAD GAS 0xAE PUSH18 0xF66714690B64736F6C634300081E00330000 ",
							"sourceMap": "81:650:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@exercise_57": {
									"entryPoint": 76,
									"id": 57,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@test_29": {
									"entryPoint": 152,
									"id": 29,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x01": {
									"entryPoint": 243,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:190:1",
										"nodeType": "YulBlock",
										"src": "0:190:1",
										"statements": [
											{
												"body": {
													"nativeSrc": "35:152:1",
													"nodeType": "YulBlock",
													"src": "35:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "52:1:1",
																		"nodeType": "YulLiteral",
																		"src": "52:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "55:77:1",
																		"nodeType": "YulLiteral",
																		"src": "55:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "45:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "45:6:1"
																},
																"nativeSrc": "45:88:1",
																"nodeType": "YulFunctionCall",
																"src": "45:88:1"
															},
															"nativeSrc": "45:88:1",
															"nodeType": "YulExpressionStatement",
															"src": "45:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "149:1:1",
																		"nodeType": "YulLiteral",
																		"src": "149:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "152:4:1",
																		"nodeType": "YulLiteral",
																		"src": "152:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "142:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "142:6:1"
																},
																"nativeSrc": "142:15:1",
																"nodeType": "YulFunctionCall",
																"src": "142:15:1"
															},
															"nativeSrc": "142:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "142:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "173:1:1",
																		"nodeType": "YulLiteral",
																		"src": "173:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "176:4:1",
																		"nodeType": "YulLiteral",
																		"src": "176:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "166:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:1"
																},
																"nativeSrc": "166:15:1",
																"nodeType": "YulFunctionCall",
																"src": "166:15:1"
															},
															"nativeSrc": "166:15:1",
															"nodeType": "YulExpressionStatement",
															"src": "166:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nativeSrc": "7:180:1",
												"nodeType": "YulFunctionDefinition",
												"src": "7:180:1"
											}
										]
									},
									"contents": "{\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063d32cb0fe14610038578063f8a8fd6d14610042575b5f5ffd5b61004061004c565b005b61004a610098565b005b603c801461005d5761005c6100f3565b5b6201518080146100705761006f6100f3565b5b620151808014610083576100826100f3565b5b62093a808014610096576100956100f3565b5b565b670de0b6b3a764000080146100b0576100af6100f3565b5b600180146100c1576100c06100f3565b5b670de0b6b3a764000080146100d9576100d86100f3565b5b671bc16d674ec8000080146100f1576100f06100f3565b5b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220e405829ce3a9cc6afd5d2188264d11ef65a119d6aaef9f545aae71f66714690b64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD32CB0FE EQ PUSH2 0x38 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x42 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x40 PUSH2 0x4C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4A PUSH2 0x98 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0x5D JUMPI PUSH2 0x5C PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x70 JUMPI PUSH2 0x6F PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x83 JUMPI PUSH2 0x82 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x96 JUMPI PUSH2 0x95 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xB0 JUMPI PUSH2 0xAF PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xC1 JUMPI PUSH2 0xC0 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0xD9 JUMPI PUSH2 0xD8 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST PUSH8 0x1BC16D674EC80000 DUP1 EQ PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0xF3 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETF SDIV DUP3 SWAP13 CALLF 0xA9CC PUSH11 0xFD5D2188264D11EF65A119 0xD6 0xAA 0xEF SWAP16 SLOAD GAS 0xAE PUSH18 0xF66714690B64736F6C634300081E00330000 ",
							"sourceMap": "81:650:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;516:209;;;:::i;:::-;;107:403;;;:::i;:::-;;516:209;577:10;564:9;:23;557:31;;;;:::i;:::-;;621:12;609:8;:24;602:32;;;;:::i;:::-;;665:8;655:6;:18;648:26;;;;:::i;:::-;;706:6;695:7;:17;688:25;;;;:::i;:::-;;516:209::o;107:403::-;228:7;201:23;:34;194:42;;;;:::i;:::-;;283:1;274:5;:10;267:18;;;;:::i;:::-;;327:4;316:7;:15;309:23;;;;:::i;:::-;;479;468:7;:34;461:42;;;;:::i;:::-;;107:403::o;7:180:1:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "68400",
								"executionCost": "115",
								"totalCost": "68515"
							},
							"external": {
								"exercise()": "213",
								"test()": "235"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 81,
									"end": 731,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 81,
									"end": 731,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e405829ce3a9cc6afd5d2188264d11ef65a119d6aaef9f545aae71f66714690b64736f6c634300081e0033",
									".code": [
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "D32CB0FE"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "F8A8FD6D"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81,
											"end": 731,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 516,
											"end": 725,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 516,
											"end": 725,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 516,
											"end": 725,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 516,
											"end": 725,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 107,
											"end": 510,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 107,
											"end": 510,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 107,
											"end": 510,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 107,
											"end": 510,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 516,
											"end": 725,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 577,
											"end": 587,
											"name": "PUSH",
											"source": 0,
											"value": "3C"
										},
										{
											"begin": 564,
											"end": 573,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 564,
											"end": 587,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 557,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 557,
											"end": 588,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 557,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 557,
											"end": 588,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 557,
											"end": 588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 557,
											"end": 588,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 557,
											"end": 588,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 557,
											"end": 588,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 557,
											"end": 588,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 621,
											"end": 633,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 609,
											"end": 617,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 609,
											"end": 633,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 602,
											"end": 634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 602,
											"end": 634,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 602,
											"end": 634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 602,
											"end": 634,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 602,
											"end": 634,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 602,
											"end": 634,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 602,
											"end": 634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 602,
											"end": 634,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 602,
											"end": 634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 665,
											"end": 673,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 655,
											"end": 661,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 655,
											"end": 673,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 648,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 648,
											"end": 674,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 648,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 648,
											"end": 674,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 648,
											"end": 674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 648,
											"end": 674,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 648,
											"end": 674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 648,
											"end": 674,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 648,
											"end": 674,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 706,
											"end": 712,
											"name": "PUSH",
											"source": 0,
											"value": "93A80"
										},
										{
											"begin": 695,
											"end": 702,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 695,
											"end": 712,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 688,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 688,
											"end": 713,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 688,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 688,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 688,
											"end": 713,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 688,
											"end": 713,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 688,
											"end": 713,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 688,
											"end": 713,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 688,
											"end": 713,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 516,
											"end": 725,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 107,
											"end": 510,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 228,
											"end": 235,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 201,
											"end": 224,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 201,
											"end": 235,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 194,
											"end": 236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 194,
											"end": 236,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 194,
											"end": 236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 194,
											"end": 236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 194,
											"end": 236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 194,
											"end": 236,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 194,
											"end": 236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 194,
											"end": 236,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 194,
											"end": 236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 283,
											"end": 284,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 274,
											"end": 279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 274,
											"end": 284,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 267,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 267,
											"end": 285,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 267,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 267,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 267,
											"end": 285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 267,
											"end": 285,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 267,
											"end": 285,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 267,
											"end": 285,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 267,
											"end": 285,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 327,
											"end": 331,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 316,
											"end": 323,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 331,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 309,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 309,
											"end": 332,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 309,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 309,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 309,
											"end": 332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 309,
											"end": 332,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 309,
											"end": 332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 309,
											"end": 332,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 309,
											"end": 332,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 479,
											"end": 502,
											"name": "PUSH",
											"source": 0,
											"value": "1BC16D674EC80000"
										},
										{
											"begin": 468,
											"end": 475,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 468,
											"end": 502,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 461,
											"end": 503,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 461,
											"end": 503,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 461,
											"end": 503,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 461,
											"end": 503,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 461,
											"end": 503,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 461,
											"end": 503,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 461,
											"end": 503,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 461,
											"end": 503,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 461,
											"end": 503,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 107,
											"end": 510,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 7,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 55,
											"end": 132,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 52,
											"end": 53,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 45,
											"end": 133,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 149,
											"end": 150,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 142,
											"end": 157,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 176,
											"end": 180,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 173,
											"end": 174,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 166,
											"end": 181,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"etherUnits.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"exercise()": "d32cb0fe",
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"exercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"etherUnits.sol\":\"etherUnits\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"etherUnits.sol\":{\"keccak256\":\"0xbb4cc4c7894a6d6be1a0c7f49049470c79c71e9a650bdfb72c5d60c2313673f2\",\"urls\":[\"bzz-raw://c56e15e1a169d8ea0eeb5ab4eeb6a70ef0f9f334d3713b4bbd97078f06b2292e\",\"dweb:/ipfs/QmZPLQXR57eyrnUZHtM6vvMGL9xMwFmXh19J9fJqQwv8xy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> etherUnits.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "etherUnits.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n --> etherUnits.sol:7:5:\n  |\n7 |     function test() public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 510,
					"file": "etherUnits.sol",
					"start": 107
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> etherUnits.sol:20:5:\n   |\n20 |     function exercise() public {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 725,
					"file": "etherUnits.sol",
					"start": 516
				},
				"type": "Warning"
			}
		],
		"sources": {
			"etherUnits.sol": {
				"ast": {
					"absolutePath": "etherUnits.sol",
					"exportedSymbols": {
						"etherUnits": [
							58
						]
					},
					"id": 59,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:33:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "etherUnits",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 58,
							"linearizedBaseContracts": [
								58
							],
							"name": "etherUnits",
							"nameLocation": "90:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "130:380:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030303030303030303030303030",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "201:23:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1000000000000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "228:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"src": "201:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "194:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "194:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "194:42:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "274:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "283:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "274:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "267:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "267:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "267:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "316:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "327:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "316:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "309:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "309:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "309:23:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 25,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 23,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "468:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2000000000000000000_by_1",
																	"typeString": "int_const 2000000000000000000"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32303030303030303030303030303030303030",
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "479:23:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2000000000000000000_by_1",
																	"typeString": "int_const 2000000000000000000"
																},
																"value": "2000000000000000000"
															},
															"src": "468:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 22,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "461:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "461:42:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "461:42:0"
											}
										]
									},
									"functionSelector": "f8a8fd6d",
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nameLocation": "116:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "120:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "130:0:0"
									},
									"scope": 58,
									"src": "107:403:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "543:182:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "564:9:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3630",
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "577:10:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"src": "564:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 32,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "557:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "557:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "557:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3234",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "609:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31343430",
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "621:12:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1440"
															},
															"src": "609:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 38,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "602:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "602:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "602:32:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "655:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3234",
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "665:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"src": "655:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 44,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "648:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "648:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "648:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "695:7:0",
																"subdenomination": "weeks",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "37",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "706:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "7"
															},
															"src": "695:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 50,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "688:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "688:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "688:25:0"
											}
										]
									},
									"functionSelector": "d32cb0fe",
									"id": 57,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "exercise",
									"nameLocation": "525:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:0:0"
									},
									"scope": 58,
									"src": "516:209:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 59,
							"src": "81:650:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "0:731:0"
				},
				"id": 0
			}
		}
	}
}